@startuml
title Request Quote Use Case Sequence Diagram

actor Client
actor "Shipment Reviewer / Moving Estimator" as Admin

participant ReactApplication as "<<View>>\nReactApplication"
participant LandingPage as "<<View>>\nLandingPage"
participant ShipmentQuotePage as "<<View>>\nShipmentQuotePage"
participant UserHomePage as "<<View>>\nUserHomePage"
participant ShipmentController as "<<Controller>>\nShipmentController"
participant QuoteService as "<<Service>>\nQuoteService"
participant QuoteRepository as "<<Repository>>\nQuoteRepository"
participant Database as "<<Database>>\nDatabase"
participant ShipmentQuotes as "<<View>>\nShipmentQuotes"

== Client Sequence ==
Client -> ReactApplication : Access website
activate ReactApplication

ReactApplication -> LandingPage : render()
activate LandingPage

alt Client is logged in
    LandingPage -> UserHomePage : Navigate to profile after login
    deactivate LandingPage
    activate UserHomePage

    UserHomePage -> ShipmentQuotePage : Select 'Request Quote'
    deactivate UserHomePage
    activate ShipmentQuotePage
else
    LandingPage -> ShipmentQuotePage : Select 'Shipment Quote'
    deactivate LandingPage
    activate ShipmentQuotePage
end

ShipmentQuotePage --> Client : Display quote form
Client -> ShipmentQuotePage : Fill up quote details Form
activate ShipmentQuotePage

ShipmentQuotePage -> ShipmentController : POST /quote
activate ShipmentController

ShipmentController -> QuoteService : createQuote()
activate QuoteService

QuoteService -> QuoteRepository : save(quoteData)
activate QuoteRepository

QuoteRepository -> Database : INSERT INTO quotes
activate Database
Database --> QuoteRepository : Success
deactivate Database

QuoteRepository --> QuoteService : Quote saved
deactivate QuoteRepository

QuoteService --> ShipmentController : QuoteResponse
deactivate QuoteService

ShipmentController --> ShipmentQuotePage : Show success message
deactivate ShipmentController

ShipmentQuotePage --> Client : 'Quote Sent Successfully' message
deactivate ShipmentQuotePage

alt Client is logged in (Post-Quote Creation)
    UserHomePage -> ShipmentController : View/Edit Quote Status
    activate ShipmentController

    ShipmentController -> QuoteService : retrieveQuoteStatus()/editQuote()
    activate QuoteService

    QuoteService -> QuoteRepository : SELECT quotes/UPDATE quotes
    activate QuoteRepository

    QuoteRepository -> Database : Query/Update quote data
    activate Database
    Database --> QuoteRepository : Query/Update Results
    deactivate Database

    QuoteRepository --> QuoteService : Quote Status/Update Confirmation
    deactivate QuoteRepository

    QuoteService --> ShipmentController : QuoteStatusResponse/EditResponse
    deactivate QuoteService

    ShipmentController --> UserHomePage : Display Quote Status/Edit Confirmation
    deactivate ShipmentController

    UserHomePage --> Client : Show Quote Status/Edit Confirmation
    deactivate UserHomePage
end

== Admin Sequence ==
Admin -> ReactApplication : Access website
activate ReactApplication

ReactApplication -> LandingPage : render()
activate LandingPage

LandingPage -> ShipmentQuotes : Admin logs in
deactivate LandingPage
activate ShipmentQuotes

ShipmentQuotes --> Admin : Display quotes management options (View/Edit/Delete/Review/Accept)
Admin -> ShipmentQuotes : Select action (View/Edit/Delete/Review/Accept)
activate ShipmentQuotes

ShipmentQuotes -> ShipmentController : Admin actions (View/Edit/Delete/Review/Accept)
activate ShipmentController

ShipmentController -> QuoteService : processAdminAction()
activate QuoteService

alt Action is View
    QuoteService -> QuoteRepository : retrieveQuotes()
    activate QuoteRepository

    QuoteRepository -> Database : SELECT quotes
    activate Database
    Database --> QuoteRepository : Quotes Data
    deactivate Database

    QuoteRepository --> QuoteService : Quotes Retrieved
    deactivate QuoteRepository
else Action is Accept
    QuoteService -> QuoteRepository : markQuoteAsAccepted()
    activate QuoteRepository

    QuoteRepository -> Database : UPDATE quotes status
    activate Database
    Database --> QuoteRepository : Update Success
    deactivate Database

    QuoteRepository --> QuoteService : Action completed
    deactivate QuoteRepository
else Action is Edit/Delete/Review
    QuoteService -> QuoteRepository : updateQuoteData()
    activate QuoteRepository

    QuoteRepository -> Database : UPDATE quotes
    activate Database
    Database --> QuoteRepository : Update Success
    deactivate Database

    QuoteRepository --> QuoteService : Action completed
    deactivate QuoteRepository
end

QuoteService --> ShipmentController : AdminResponse
deactivate QuoteService

ShipmentController --> ShipmentQuotes : Show result/response message
deactivate ShipmentController

ShipmentQuotes --> Admin : 'Action Completed' or 'Quotes Displayed' message
deactivate ShipmentQuotes

@enduml
