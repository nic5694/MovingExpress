@startuml
title Request Quote Class Diagram within the Shipment Subdomain

package "shipmentsubdomain" {

    package "businesslayer" {
        interface QuoteService {
            + getAllQuotes(quoteStatus: QuoteStatus) : List<QuoteResponseModel>
            + getQuote(quoteId: String) : QuoteResponseModel
            + addQuote(quoteRequest: QuoteRequestModel) : QuoteResponseModel
            + declineQuote(quoteId: String) : EventResponseModel
            + acceptQuote(quoteId: String) : EventResponseModel
        }

        class QuoteServiceImpl {
            - quoteRepository : QuoteRepository
            - quoteRequestMapper : QuoteRequestMapper
            - quoteResponseMapper : QuoteResponseMapper
            + getAllQuotes(quoteStatus: QuoteStatus) : List<QuoteResponseModel>
            + getQuote(quoteId: String) : QuoteResponseModel
            + addQuote(quoteRequest: QuoteRequestModel) : QuoteResponseModel
            + declineQuote(quoteId: String) : EventResponseModel
            + acceptQuote(quoteId: String) : EventResponseModel
        }
    }

    package "datalayer" {
        class ContactDetails {
            - firstName : String
            - lastName : String
            - emailAddress : String
            - phoneNumber : String
        }

        enum ContactMethod {
            EMAIL
            PHONE_NUMBER
            BOTH
        }

        enum Country {
            USA
            CA
        }

        class PickupAddress {
            - pickupStreetAddress : String
            - pickupCity : String
            - pickupCountry : Country
            - pickupPostalCode : String
            - pickupNumberOfRooms : int
            - pickupElevator : boolean
            - pickupBuildingType : String
        }

        class DestinationAddress {
            - destinationStreetAddress : String
            - destinationCity : String
            - destinationCountry : Country
            - destinationPostalCode : String
            - destinationNumberOfRooms : int
            - destinationElevator : boolean
            - destinationBuildingType : String
        }

        class Quote {
            - id : Integer
            - quoteIdentifier : QuoteIdentifier
            - pickupAddress : PickupAddress
            - destinationAddress : DestinationAddress
            - contactDetails : ContactDetails
            - contactMethod : ContactMethod
            - expectedMovingDate : LocalDate
            - initiationDate : LocalDateTime
            - comment : String
            - quoteStatus : QuoteStatus
            - shipmentName : String
        }

        class MovingEstimatorIdentifier {
            - movingEstimatorId : String
        }

        class QuoteIdentifier {
            - quoteId : String
        }

        enum QuoteStatus {
            PENDING
            CREATED
            ACCEPTED
            DECLINED
        }

        interface QuoteRepository extends JpaRepository {
            + findAllByQuoteStatus(quoteStatus: QuoteStatus) : List<Quote>
            + findByQuoteIdentifier_QuoteId(quoteId: String) : Quote
        }
    }

    package "datamapperlayer" {
        interface QuoteRequestMapper {
            + requestModelToEntity(quoteRequest: QuoteRequestModel) : Quote
        }

        interface QuoteResponseMapper {
            + entityToResponseModel(quote: Quote) : QuoteResponseModel
            + entitiesListToResponseList(quotes: List<Quote>) : List<QuoteResponseModel>
        }
    }

    package "presentationlayer" {
        class QuoteRequestModel {
            - pickupStreetAddress : String
            - pickupCity : String
            - pickupCountry : Country
            - pickupPostalCode : String
            - pickupNumberOfRooms : int
            - pickupElevator : boolean
            - pickupBuildingType : String
            - destinationStreetAddress : String
            - destinationCity : String
            - destinationCountry : Country
            - destinationPostalCode : String
            - destinationNumberOfRooms : int
            - destinationElevator : boolean
            - destinationBuildingType : String
            - firstName : String
            - lastName : String
            - emailAddress : String
            - phoneNumber : String
            - expectedMovingDate : LocalDate
            - contactMethod : ContactMethod
            - comment : String
            - shipmentName : String
        }

        class QuoteResponseModel {
            - quoteId : String
            - pickupStreetAddress : String
            - pickupCity : String
            - pickupCountry : Country
            - pickupPostalCode : String
            - pickupNumberOfRooms : int
            - pickupElevator : boolean
            - pickupBuildingType : String
            - destinationStreetAddress : String
            - destinationCity : String
            - destinationCountry : Country
            - destinationPostalCode : String
            - destinationNumberOfRooms : int
            - destinationElevator : boolean
            - destinationBuildingType : String
            - firstName : String
            - lastName : String
            - phoneNumber : String
            - emailAddress : String
            - contactMethod : ContactMethod
            - expectedMovingDate : LocalDate
            - initiationDate : LocalDateTime
            - comment : String
            - quoteStatus : QuoteStatus
            - name : String
        }

        class QuoteController {
            - quoteService : QuoteService
            + getAllQuotes(quoteStatus: QuoteStatus) : ResponseEntity<List<QuoteResponseModel>>
            + getQuote(quoteId: String) : ResponseEntity<QuoteResponseModel>
            + addQuote(quoteRequest: QuoteRequestModel) : ResponseEntity<QuoteResponseModel>
            + createQuoteEvent(eventRequestModel: EventRequestModel, quoteId: String) : EventResponseModel
        }

        class EventRequestModel {
            - event : String
        }

        class EventResponseModel {
            - event : String
            - resultType : String
            - href : String
        }
    }

    QuoteServiceImpl -down-|> QuoteService : implements
    QuoteServiceImpl -down-> QuoteRepository : uses
    QuoteServiceImpl -down-> QuoteRequestMapper : uses
    QuoteServiceImpl -down-> QuoteResponseMapper : uses
    QuoteRequestMapper -left- Quote : data conversion
    QuoteResponseMapper -right- Quote : data conversion
    QuoteRepository -[hidden]-> Quote : data persistence
    Quote -up-^ ContactDetails : has
    Quote -up-^ PickupAddress : has
    Quote -up-^ DestinationAddress : has
    Quote -up-^ QuoteIdentifier : has
    Quote -up-^ MovingEstimatorIdentifier : has
    Quote -up-^ ContactMethod : has
    PickupAddress -up-^ Country : uses
    DestinationAddress -up-^ Country : uses
    QuoteController -right-> QuoteService : uses
    QuoteController -down-> QuoteRequestModel : uses
    QuoteController -down-> QuoteResponseModel : uses
    QuoteController -down-> EventRequestModel : uses
    QuoteController -down-> EventResponseModel : uses
    QuoteRequestMapper -up-^ QuoteRequestModel : uses
    QuoteResponseMapper -up-^ QuoteResponseModel : uses
    QuoteService -down-> QuoteStatus : uses
    QuoteServiceImpl -down-> QuoteStatus : uses
}

@enduml
