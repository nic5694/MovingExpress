@startuml
title Shipment Class Diagram within Moving Express Subdomain


package "shipmentsubdomain" {
        package "businesslayer" {
            interface ShipmentService {
                + getAllShipments() : List<ShipmentResponse>
                + getShipmentDetails(shipmentId: String) : ShipmentResponse
                + createShipmentFromQuote(quoteId: String) : ShipmentResponse
                + updateShipment(shipmentUpdateRequest: ShipmentUpdateRequest) : ShipmentResponse
                + deleteShipment(shipmentId: String) : boolean
                + updateShipmentStatus(shipmentId: String, status: ShipmentStatus) : boolean
            }

            class ShipmentServiceImpl {
                - shipmentRepository : ShipmentRepository
                - shipmentMapper : ShipmentMapper
                + getAllShipments() : List<ShipmentResponse>
                + getShipmentDetails(shipmentId: String) : ShipmentResponse
                + createShipmentFromQuote(quoteId: String) : ShipmentResponse
                + updateShipment(shipmentUpdateRequest: ShipmentUpdateRequest) : ShipmentResponse
                + deleteShipment(shipmentId: String) : boolean
                + updateShipmentStatus(shipmentId: String, status: ShipmentStatus) : boolean
            }
        }

        package "datalayer" {
            class Shipment {
                - id : Integer
                - shipmentId: String
                - status: ShipmentStatus
                - departureAddress: String
                - arrivalAddress: String
                - estimatedDeparture: LocalDateTime
                - estimatedArrival: LocalDateTime
                - quoteId: String
            }

            class ShipmentIdentifier {
                - shipmentId : String
            }

            interface ShipmentRepository {
                + findById(shipmentId: String): Shipment
                + findByQuoteId(quoteId: String): Shipment
                + save(shipment: Shipment): Shipment
                + deleteById(shipmentId: String): void
            }

            enum ShipmentStatus {
                IN_TRANSITION
                LOADED
                UNLOADED
                AWAITING_PICKUP
                IN_CUSTOMS
                DELIVERED
                CANCELED
            }

            enum Country {
                USA
                CA
            }
        }

        package "datamapperlayer" {
            interface ShipmentMapper {
                + toShipmentModel(shipment: Shipment) : ShipmentResponse
                + toShipmentEntity(shipmentCreateRequest: ShipmentCreateRequest) : Shipment
                + toShipmentEntityFromQuote(quoteId: String) : Shipment
                + updateEntity(shipmentUpdateRequest: ShipmentUpdateRequest, shipment: Shipment): Shipment
            }
        }

        package "presentationlayer" {
            class ShipmentResponse {
                - shipmentId : String
                - status: ShipmentStatus
                - departureAddress: String
                - arrivalAddress: String
                - estimatedDeparture: LocalDateTime
                - estimatedArrival: LocalDateTime
                - quoteId: String
            }

            class ShipmentCreateRequest {
                - departureAddress: String
                - arrivalAddress: String
                - estimatedDeparture: LocalDateTime
                - estimatedArrival: LocalDateTime
            }

            class ShipmentUpdateRequest {
                - shipmentId : String
                - status: ShipmentStatus
                - departureAddress: String
                - arrivalAddress: String
                - estimatedDeparture: LocalDateTime
                - estimatedArrival: LocalDateTime
            }

            class ShipmentController {
                - shipmentService : ShipmentService
                + getAllShipments(): List<ShipmentResponse>
                + getShipmentDetails(shipmentId: String) : ShipmentResponse
                + createShipmentFromQuote(quoteId: String) : ShipmentResponse
                + updateShipment(shipmentUpdateRequest: ShipmentUpdateRequest) : ShipmentResponse
                + deleteShipment(shipmentId: String) : boolean
                + updateShipmentStatus(shipmentId: String, status: ShipmentStatus) : boolean
            }
        }

        ' Relationships
        ShipmentServiceImpl -down-|> ShipmentService : implements
        ShipmentServiceImpl -down-> ShipmentRepository : uses
        ShipmentServiceImpl -down-> ShipmentMapper : uses
        ShipmentMapper -right-> Shipment : maps
        ShipmentRepository -[hidden]-> Shipment : stores
        Shipment -up-^ ShipmentIdentifier : identified by
        Shipment -up-^ ShipmentStatus : has status
        Shipment -up-^ Country : uses
        ShipmentController -right-> ShipmentService : uses
        ShipmentController -down-> ShipmentResponse : manages
        ShipmentController -down-> ShipmentCreateRequest : receives
        ShipmentController -down-> ShipmentUpdateRequest : receives
        ShipmentMapper -up-^ ShipmentResponse : maps
        ShipmentMapper -up-^ ShipmentCreateRequest : maps
        ShipmentMapper -up-^ ShipmentUpdateRequest : maps
    }
}

@enduml
