@startuml
title Shipment Class Diagram within Moving Express Subdomain

package "shipmentsubdomain" {
    package "businesslayer" {
        interface ShipmentService {
            + createShipment(quoteResponseModel: QuoteResponseModel) : ShipmentResponseModel
            + getAllShipments(userId: Optional<String>, email: Optional<String>) : List<ShipmentResponseModel>
            + updateShipment(shipmentUpdateRequest: ShipmentUpdateRequest) : ShipmentResponseModel
            + getShipmentById(shipmentId: String) : ShipmentResponseModel
            + deleteShipment(shipmentId: String) : boolean
        }

        class ShipmentServiceImpl {
            - shipmentRepository : ShipmentRepository
            - quoteResponseToShipmentMapper : QuoteResponseToShipmentMapper
            - shipmentResponseMapper : ShipmentResponseMapper
            - addressMapper : AddressMapper
            - emailUtil : EmailUtil
            + createShipment(quoteResponseModel: QuoteResponseModel) : ShipmentResponseModel
            + getAllShipments(userId: Optional<String>, email: Optional<String>) : List<ShipmentResponseModel>
            + updateShipment(shipmentUpdateRequest: ShipmentUpdateRequest) : ShipmentResponseModel
            + getShipmentById(shipmentId: String) : ShipmentResponseModel
            + deleteShipment(shipmentId: String) : boolean
        }
    }

    package "datalayer" {
        class Shipment {
            - id : Integer
            - shipmentIdentifier : ShipmentIdentifier
            - userId : String
            - email : String
            - phoneNumber : String
            - truckIdentifier : TruckIdentifier
            - status : Status
            - expectedMovingDate : LocalDate
            - actualMovingDate : LocalDate
            - approximateWeight : double
            - weight : double
            - name : String
            - pickupAddress : Address
            - destinationAddress : Address
        }

        class Address {
            - id : Integer
            - addressIdentifier : AddressIdentifier
            - city : String
            - streetAddress : String
            - country : Country
            - postalCode : String
        }

        enum Status {
            QUOTED
            LOADING
            TRANSIT
            DELIVERED
        }

        enum Country {
            USA
            CA
        }

        interface ShipmentRepository {
            + findShipmentByUserId(userId: String) : List<Shipment>
            + findShipmentByEmail(email: String) : List<Shipment>
            + findById(shipmentId: String) : Shipment
            + save(shipment: Shipment) : Shipment
            + deleteById(shipmentId: String) : void
        }

        interface AddressRepository {
            + save(address: Address) : Address
        }
    }

    package "datamapperlayer" {
        interface AddressMapper {
            + toAddress(streetAddress: String, city: String, postalCode: String, country: Country) : Address
        }

        interface QuoteResponseToShipmentMapper {
            + toShipment(quoteResponse: QuoteResponseModel, addressMapper: AddressMapper) : Shipment
        }

        interface ShipmentResponseMapper {
            + entityToResponseModel(shipment: Shipment) : ShipmentResponseModel
        }
    }

    package "presentationlayer" {
        class ShipmentResponseModel {
            - shipmentId : String
            - pickupAddress : Address
            - destinationAddress : Address
            - userId : String
            - truckId : String
            - status : Status
            - shipmentName : String
            - approximateWeight : double
            - weight : double
            - email : String
            - phoneNumber : String
        }

        class ShipmentRequestModel {
            - pickupAddressId : String
            - destinationAddressId : String
            - clientId : String
            - truckId : String
            - status : Status
        }

        class ShipmentUpdateRequest {
            - shipmentId : String
            - status: Status
            - departureAddress: String
            - arrivalAddress: String
            - estimatedDeparture: LocalDateTime
            - estimatedArrival: LocalDateTime
        }

        class ShipmentController {
            - emailUtil : EmailUtil
            - shipmentService : ShipmentService
            + getAllShipments(requestParams: Map<String, String>) : ResponseEntity<List<ShipmentResponseModel>>
            + createShipment(quoteResponseModel: QuoteResponseModel) : ResponseEntity<ShipmentResponseModel>
            + updateShipment(shipmentUpdateRequest: ShipmentUpdateRequest) : ResponseEntity<ShipmentResponseModel>
            + getShipmentById(shipmentId: String) : ResponseEntity<ShipmentResponseModel>
            + deleteShipment(shipmentId: String) : ResponseEntity<Boolean>
        }
    }

    ' Relationships
    ShipmentServiceImpl -down-|> ShipmentService : implements
    ShipmentServiceImpl -down-> ShipmentRepository : uses
    ShipmentServiceImpl -down-> QuoteResponseToShipmentMapper : uses
    ShipmentServiceImpl -down-> ShipmentResponseMapper : uses
    ShipmentServiceImpl -down-> AddressMapper : uses
    ShipmentServiceImpl -down-> AddressRepository : uses
    ShipmentServiceImpl -down-> EmailUtil : uses
    ShipmentRepository -down-> Shipment : accesses
    AddressRepository -down-> Address : accesses
    QuoteResponseToShipmentMapper -right-> Shipment : maps
    ShipmentResponseMapper -left-> Shipment : maps
    AddressMapper -left-> Address : maps
    ShipmentController -right-> ShipmentService : uses
    ShipmentController -down-> ShipmentResponseModel : manages
    ShipmentController -down-> ShipmentRequestModel : receives
    ShipmentController -down-> ShipmentUpdateRequest : receives

    ' Enum Relationships
    Shipment -down-^ Status : has status
    Address -down-^ Country : located in
}

@enduml
