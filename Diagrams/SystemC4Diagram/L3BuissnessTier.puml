@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/java.puml
!include DEVICONS/mysql.puml
!include DEVICONS/react.puml
!include DEVICONS/html5.puml
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!include DEVICONS2/google.puml
!include DEVICONS2/npm_original_wordmark.puml
!include DEVICONS2/typescript.puml
!include DEVICONS2/javascript.puml
!define SPRITES https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/v1.1/sprites
!include SPRITES/auth0.puml


AddElementTag("service", $shape=square(), $bgColor="#557C99", $fontColor="white", $legendText="Service\square")
AddElementTag("ext_service", $shape=sqaure(), $bgColor="Gray", $fontColor="white" ,$legendText="External Service\square")
AddElementTag("SPA", $shape=RoundedBoxShape(), $bgColor="#61DAFB", $fontColor="#333333", $legendText="Single-Page Application")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="#f29111", $fontColor="white", $legendText="Databases")
Container(auth, "Auth0", "SaaS", "Easy and adaptable authorisation and authentication platform.", $sprite="auth0", $tags="ext_service")
Container(email, "Gmail SMTP System", "Email Service", "The internal google emailing system.", $sprite="google", $tags="ext_service")

Container(singlePageApp, "Single-Page Application", "TypeScript, ReactJs", "Proivdes all the moving system's functionality to the users via their web browser.", $sprite="react", $tags="SPA")
Rectangle "API" as API #line.dashed{
    Package "Customer"{
        Container(customerController, "Customer Controller", "Component: Spring Boot REST Controller", "Provides users with the ability to manage their account.", $sprite="java", $tags="service")
        Container(customerService, "CustomerService", "Component: Sprint Boot Service" ,"Provides the functionalities to get, update, create and delete.", $sprite="java", $tags="service")
        Container(customerRepository, "Customer Repository","Component: JPA Repository", "Makes requests to the database to fetch or update data.", $sprite="java", $tags="service")
        customerController -[dashed]-> customerService : "**uses**"
        customerService -[dashed]-> customerRepository : "**uses**"
    }
    Package "Inventory"{
        Container(inventoryController, "Inventory Controller", "Component: Spring Boot REST Controller", "Provides users with the ability to manage and view their inventories.", $sprite="java", $tags="service")
        Container(inventoryService, "Inventory Service", "Component: Sprint Boot Service","Provides the functionalities to get, update, create and delete.", $sprite="java", $tags="service")
        Container(inventoryRepository, "Inventory Repository","Component: JPA Repository", "Makes requests to the database to fetch or update data.", $sprite="java", $tags="service")
        inventoryController -[dashed]-> inventoryService: "**uses**"
        inventoryService -[dashed]-> inventoryRepository: "**uses**"
       
    }
    Package "Shipment"{
        Container(shipmentController, "Shipment Controller", "Component: Spring Boot REST Controller", "Provides users with the ability to manage and view their shipments.", $sprite="java", $tags="service")
        Container(driverController, "Driver Controller", "Component: Spring Boot REST Controller", "Provides company employees to manage drivers and view their information.", $sprite="java", $tags="service")
        Container(shipmentService, "Shipment Service","Component: Sprint Boot Service","Provides the functionalities to get, update, create and delete.", $sprite="java", $tags="service")
        Container(driverService, "Driver Service", "Component: Sprint Boot Service", "Provides the functionalities to get, update, create and delete.", $sprite="java", $tags="service")
        Container(shipmentRepository, "ShipmentRepository","Component: JPA Repository","Makes requests to the database to fetch or update data.", $sprite="java", $tags="service")
        Container(driverRepository, "Driver Repository", "Component: JPA Repository", "Makes requests to the database to fetch or update data.", $sprite="java", $tags="service")
        Container(addressRepository, "AddressRepository","Component: JPA Repository","Makes requests to the database to fetch or update data.", $sprite="java", $tags="service")
        shipmentService -[dashed]-> addressRepository: "**uses**"
        shipmentController -[dashed]-> shipmentService: "**uses**"
        shipmentService -[dashed]-> shipmentRepository: "**uses**"
        shipmentService -[dashed]-> inventoryRepository: "**uses**"
        shipmentService -[dashed]-> customerRepository: "**uses**"
        driverController -[dashed]-> driverService: "**uses**"
        driverService -[dashed]-> driverRepository: "**uses**"
        shipmentService -[dashed]-> driverRepository: "**uses**"
      
    }
    Package "Config"{
        Package "Security"{
            Container(springSecurityConfigurationBeans, "Spring Security Bean Configuration", "Component: Spring Boot Configuration Beans", "Configures Auth0 usage in the system.", $sprite="java", $tags="service")
            Package "controllers"{
                Container(securityController, "Security Controller", "Component: Spring Boot Rest Controller", "Provides users with the ability to sucessfully log in with their JWT tokens.", $sprite="java", $tags="service")
            }
            Package "filters"{
                Container(ResponseHeaderFilter, "Response Header Filter", "Component: Spring Boot Component Filter", "Provides the system with the ability to filter all API request response headers according to specific criteria.", $sprite="java", $tags="service")
            }
            Package "Service"{
                Container(Auth0LoginService, "Auth0 Login Service", "Component: Spring Boot Service", "Provides the functionalities to login and redirect users with their JWT tokens.", $sprite="java", $tags="service")
                Container(Auth0ManagementService, "Auth0 Management Service", "Component: Spring Boot Service", "Provides the functionalities to manage users within auth0.", $sprite="java", $tags="service")
            }
            springSecurityConfigurationBeans -[dashed]-> auth: "**Uses**\n[HTTPS/JSON]"
            springSecurityConfigurationBeans -[dashed]-> Auth0LoginService: "**Uses**"
            springSecurityConfigurationBeans -[dashed]-> Auth0ManagementService: "**Uses**
            ResponseHeaderFilter -[dashed]-> securityController: "**Inserted By**"
            securityController -[dashed]-> Auth0LoginService: "**Uses**"
            securityController -[dashed]-> Auth0ManagementService: "**Uses**"
            

        }
        ' Container(ErrorMessage, "ErrorMessage", "Error Message", "Component ")
        ResponseHeaderFilter -[dashed]-> springSecurityConfigurationBeans: "**Is Configured by**"
    }
    Package "Reports Service" {
        Container(reportsService, "Spring Reports Service", "Component: Spring Boot Reports Service", "Generates specific reports.", $sprite="java", $tags="service")
    }
    Package "Util"{
        Container(EmailUtil, "Spring Email Util Component", "Component: Spring Boot Component", "Generates and sends notification email to target adress.", $sprite="java", $tags="service")
        EmailUtil -[dashed]-> email : "**Sends email using**\n[SSL/SMTP]"
        customerService -[dashed]--> EmailUtil: "**uses**"
        shipmentService -[dashed]--> EmailUtil: "**uses**"
    }
        ResponseHeaderFilter -[dashed]-> inventoryController: "**Direct Request**"
        ResponseHeaderFilter -[dashed]-> customerController: "**Direct Request**"
        ResponseHeaderFilter -[dashed]-> shipmentController: "**Direct Request**"
        ResponseHeaderFilter -[dashed]-> driverController: "**Direct Request**"

        inventoryService -[dashed]-> reportsService: "**uses**"
        shipmentService -[dashed]-> reportsService: "**uses**
}
inventoryService -[dashed]-> shipmentRepository: "**uses**"
ContainerDb(database, "Database", "MySQL", "Stores client data, shipment information and user contact details", $sprite="mysql", $tags="storage")
inventoryRepository -[dashed]-> database: "**Makes calls via**\nSQL/TCP\n[JDBC]"
shipmentRepository -[dashed]-> database: "**Makes calls via**\nSQL/TCP\n[JDBC]"
addressRepository -[dashed]-> database: "**Makes calls via**\nSQL/TCP\n[JDBC]"
customerRepository -[dashed]-> database: "**Makes calls via**\nSQL/TCP\n[JDBC]"
singlePageApp -[dashed]-> ResponseHeaderFilter : "**Makes API calls to**\n[HTTPS/JSON]"
SHOW_LEGEND()
@enduml