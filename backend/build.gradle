plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
java {
    sourceCompatibility = '17'
}

ext {
    mapstructVersion = "1.5.3.Final"
    lombokVersion = "1.18.26"
    h2Version = '1.4.200'
    lombokMapstructBindingVersion = "0.2.0"
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java:8.0.23'
    implementation 'com.okta.spring:okta-spring-boot-starter:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.sun.mail:javax.mail:1.5.5'
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.bitbucket.b_c:jose4j:0.9.3'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            "org.projectlombok:lombok:${lombokVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    runtimeOnly "com.h2database:h2"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation 'io.projectreactor:reactor-test',
            'org.springframework.boot:spring-boot-starter-test',
            'org.yaml:snakeyaml:2.2'
}
jacoco {
    toolVersion = '0.8.8'
}

// Common exclusions for Jacoco tasks
def testExclusionClasses = [
        "com/example/backend/config/**",
        "com/example/backend/shipmentsubdomain/datalayer/shipment/**",
        "com/example/backend/util/**"
        ]

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: testExclusionClasses)
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: testExclusionClasses)
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }
}


jacocoTestCoverageVerification.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    jvmArgs '--enable-preview'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}